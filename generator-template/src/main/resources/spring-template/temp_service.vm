package ${package};

#foreach ($item in $import_parent)
import $item ;
#end

import lombok.RequiredArgsConstructor;
import org.springframework.beans.BeanUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ${class_name}Service {

    @Autowired
    private ${class_name}Repository repository;

    private Page<${class_name}Response> get${class_name}Responses(Pageable pageable) {
        Page<${class_name}Entity> result = this.repository.findAll(pageable);

        if (result.getContent().isEmpty()) {
            return new PageImpl<>(Collections.emptyList(), pageable, 0);
        }
        List<${class_name}Response> responses = result.getContent().stream()
                .map(${class_name}Response::new)
                .collect(Collectors.toList());

        return new PageImpl<>(responses, pageable, responses.size());
    }

    public BaseResponse<List<${class_name}Response>> getAll(
            String searchKey,
            String searchValue,
            Integer page,
            Integer size
    ) {
        Pageable pageable = PageRequest.of(page, size);
        Page<${class_name}Response> pageResult = get${class_name}Responses(pageable);
        var data = BaseResponse.<List<${class_name}Response>>builder()
                        .timestamp(new Date())
                        .data(pageResult.getContent().stream().collect(Collectors.toList()))
                        .statusCode(HttpStatus.OK.value())
                        .message("Get Successs")
                        .pageNo(page + 1)
                        .pageRecords(pageResult.getSize())
                        .ttlPages(pageResult.getTotalPages())
                        .ttlRecords((int) pageResult.getTotalElements())
                        .build();
        return data;
    }

    public BaseResponse<${class_name}Response> getById(${type_pk} id) {
        ${class_name}Entity entity = this.repository.findById(id).orElse(null);
        if (entity == null) {
            throw new CommonApiException("Id " + id + " Not Found", HttpStatus.BAD_REQUEST);
        }
        var data = BaseResponse.<${class_name}Response>builder()
                .timestamp(new Date())
                .data(new ${class_name}Response(entity))
                .statusCode(HttpStatus.OK.value())
                .error("")
                .message("")
                .pageNo(0)
                .pageRecords(0)
                .ttlPages(0)
                .ttlRecords(0)
                .build();
        return data;
    }

    public BaseResponse<${class_name}Response> save(${class_name}Request request) {
        ${class_name}Entity entity = new ${class_name}Entity(request);
        try {
            this.repository.saveAndFlush(entity);
            var data = BaseResponse.<${class_name}Response>builder()
                    .timestamp(new Date())
                    .data(new ${class_name}Response(entity))
                    .statusCode(HttpStatus.OK.value())
                    .message("Get Successs")
                    .build();
            return data;
        } catch (Exception e) {
            throw new CommonApiException("Failed save to database", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    public BaseResponse<${class_name}Response> update(${class_name}Request request, ${type_pk} id) {
        // find data
        ${class_name}Entity entity = this.repository.findById(id).orElse(null);
        if (entity == null) {
            throw new CommonApiException("Id " + id + " not found", HttpStatus.BAD_REQUEST);
        }
        // update data
        BeanUtils.copyProperties(request, entity);
        // save ke database
        try {
            this.repository.saveAndFlush(entity);
            var data = BaseResponse.<${class_name}Response>builder()
                    .timestamp(new Date())
                    .data(new ${class_name}Response(entity))
                    .statusCode(HttpStatus.OK.value())
                    .message("Created Success")
                    .build();
            return data;
        } catch (Exception e) {
            throw new CommonApiException("Failed update to database", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    public BaseResponse<${class_name}Response> delete(${type_pk} id) {
        ${class_name}Entity entity = this.repository.findById(id).orElse(null);
        if (entity == null) {
            throw new CommonApiException("Id" + id + " not found", HttpStatus.BAD_REQUEST);
        }

        try {
            this.repository.delete(entity);
            var data = BaseResponse.<${class_name}Response>builder()
                    .timestamp(new Date())
                    .data(new ${class_name}Response(entity))
                    .statusCode(HttpStatus.OK.value())
                    .message("Updated Success")
                    .build();
            return data;
        } catch (Exception e) {
            throw new CommonApiException("Failed save to database", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
