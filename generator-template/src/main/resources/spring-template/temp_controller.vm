package ${package};

#foreach ($item in $import_parent)
import $item ;
#end
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping("${path_api}")
@Tag(name = "${class_name}", description = "REST API for ${class_name}")
public class ${class_name}Controller {
    #set($lowercaseFirstChar = $class_name.substring(0, 1).toLowerCase())
    #set($className = $lowercaseFirstChar + $class_name.substring(1))

    private final ${class_name}Service ${className}service;

    @Operation(summary = "Get All ${class_name}")
    @GetMapping
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200",
                    description = "Get Success",
                    content = {@Content(mediaType = "application/json",
                    schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "400",
                    description = "OK",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "404",
                    description = "OK",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "503",
                    description = "OK",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))})
    })
    public ResponseEntity<BaseResponse> getAll(
            @Parameter(description = "Filter example column_name OPERATOR value")
            @RequestParam(value = "filter", required = false) List<String> filters,
            @Parameter(description = "1-based page index (1..N)")
            @RequestParam(name = "page", defaultValue = "1") @PositiveOrZero Integer page,
            @Parameter(description = "page size")
            @RequestParam(name = "size", defaultValue = "20") @PositiveOrZero Integer size
    ) {
        var result = this.${className}service.getAll(filters, page, size);
        return new ResponseEntity<BaseResponse>(result, HttpStatus.OK);
    }

    @Operation(summary = "Get By Id ${class_name}")
    @GetMapping("#foreach($param in $list_param_path)$param#end")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200",
                    description = "Get Success",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "400",
                    description = "OK",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "404",
                    description = "OK",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "503",
                    description = "OK",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))})
    })
    public ResponseEntity<BaseResponse> getById(
        #foreach ($param in $list_param)
            $param
        #end
        ) {
        var result = this.${className}service.getById(#foreach ($param in $list_param_value) $param #end);
        return new ResponseEntity<BaseResponse>(result, HttpStatus.OK);
    }

    @Operation(summary = "Save ${class_name}")
    @PostMapping
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201",
                    description = "Created Success",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "400",
                    description = "Bad Request",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "404",
                    description = "Not Found",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "503",
                    description = "Service Unavailable",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))})
    })
    public ResponseEntity<BaseResponse> save(@RequestBody @Valid ${class_name}Request request) {
        var result = this.${className}service.save(request);
        return new ResponseEntity<BaseResponse>(result, HttpStatus.CREATED);
    }

    @Operation(summary = "Update ${class_name}")
    @PatchMapping("#foreach($param in $list_param_path)$param#end")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200",
                    description = "Updated Success",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "400",
                    description = "Bad Request",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "404",
                    description = "Not Found",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))}),
            @ApiResponse(responseCode = "503",
                    description = "Service Unavailable",
                    content = {@Content(mediaType = "application/json",
                            schema = @Schema(implementation = BaseResponse.class))})
    })
    public ResponseEntity<BaseResponse> update(
                @RequestBody @Valid ${class_name}Request request,
            #foreach ($param in $list_param)
                $param
            #end
            ) {
        var result = this.${className}service.update(request, #foreach ($param in $list_param_value) $param #end);
        return new ResponseEntity<BaseResponse>(result, HttpStatus.OK);
    }

}
